{"ast":null,"code":"var _jsxFileName = \"/Users/rohanksojo/Documents/Folders/Settler/src/context/ExpenseContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseContext = /*#__PURE__*/createContext();\nconst initialState = {\n  expenses: [],\n  groups: [{\n    id: 1,\n    name: 'Roommates',\n    members: ['You', 'Alice', 'Bob', 'Charlie'],\n    color: '#3b82f6'\n  }, {\n    id: 2,\n    name: 'Trip to NYC',\n    members: ['You', 'Alice', 'Bob'],\n    color: '#22c55e'\n  }],\n  currentUser: 'You',\n  balances: {}\n};\nfunction expenseReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_EXPENSE':\n      const newExpense = {\n        id: Date.now(),\n        ...action.payload,\n        createdAt: new Date().toISOString()\n      };\n\n      // Calculate new balances\n      const updatedBalances = {\n        ...state.balances\n      };\n      const {\n        amount,\n        paidBy,\n        splitBetween\n      } = action.payload;\n      const splitAmount = amount / splitBetween.length;\n\n      // Update balances for each person\n      splitBetween.forEach(person => {\n        if (!updatedBalances[person]) {\n          updatedBalances[person] = {};\n        }\n        if (!updatedBalances[person][paidBy]) {\n          updatedBalances[person][paidBy] = 0;\n        }\n        if (!updatedBalances[paidBy]) {\n          updatedBalances[paidBy] = {};\n        }\n        if (!updatedBalances[paidBy][person]) {\n          updatedBalances[paidBy][person] = 0;\n        }\n        if (person !== paidBy) {\n          updatedBalances[person][paidBy] += splitAmount;\n          updatedBalances[paidBy][person] -= splitAmount;\n        }\n      });\n      return {\n        ...state,\n        expenses: [...state.expenses, newExpense],\n        balances: updatedBalances\n      };\n    case 'SETTLE_UP':\n      const {\n        from,\n        to,\n        amount: settleAmount\n      } = action.payload;\n      const settledBalances = {\n        ...state.balances\n      };\n      if (settledBalances[from] && settledBalances[from][to]) {\n        settledBalances[from][to] -= amount;\n        if (settledBalances[from][to] <= 0) {\n          delete settledBalances[from][to];\n        }\n      }\n      if (settledBalances[to] && settledBalances[to][from]) {\n        settledBalances[to][from] += amount;\n        if (settledBalances[to][from] <= 0) {\n          delete settledBalances[to][from];\n        }\n      }\n      return {\n        ...state,\n        balances: settledBalances\n      };\n    case 'ADD_GROUP':\n      return {\n        ...state,\n        groups: [...state.groups, action.payload]\n      };\n    default:\n      return state;\n  }\n}\nexport function ExpenseProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(expenseReducer, initialState);\n  const addExpense = expense => {\n    dispatch({\n      type: 'ADD_EXPENSE',\n      payload: expense\n    });\n  };\n  const settleUp = (from, to, amount) => {\n    dispatch({\n      type: 'SETTLE_UP',\n      payload: {\n        from,\n        to,\n        amount\n      }\n    });\n  };\n  const addGroup = group => {\n    dispatch({\n      type: 'ADD_GROUP',\n      payload: group\n    });\n  };\n  const getNetBalance = person => {\n    const balances = state.balances[person] || {};\n    let totalOwed = 0;\n    let totalOwing = 0;\n    Object.entries(balances).forEach(([otherPerson, amount]) => {\n      if (amount > 0) {\n        totalOwed += amount;\n      } else {\n        totalOwing += Math.abs(amount);\n      }\n    });\n    return {\n      totalOwed,\n      totalOwing,\n      net: totalOwed - totalOwing\n    };\n  };\n  const getSimplifiedBalances = () => {\n    const simplified = [];\n    const processed = new Set();\n    Object.entries(state.balances).forEach(([person, balances]) => {\n      Object.entries(balances).forEach(([otherPerson, amount]) => {\n        const key = [person, otherPerson].sort().join('-');\n        if (!processed.has(key) && amount !== 0) {\n          simplified.push({\n            from: amount > 0 ? otherPerson : person,\n            to: amount > 0 ? person : otherPerson,\n            amount: Math.abs(amount)\n          });\n          processed.add(key);\n        }\n      });\n    });\n    return simplified;\n  };\n  return /*#__PURE__*/_jsxDEV(ExpenseContext.Provider, {\n    value: {\n      ...state,\n      addExpense,\n      settleUp,\n      addGroup,\n      getNetBalance,\n      getSimplifiedBalances\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(ExpenseProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ExpenseProvider;\nexport function useExpense() {\n  _s2();\n  const context = useContext(ExpenseContext);\n  if (!context) {\n    throw new Error('useExpense must be used within an ExpenseProvider');\n  }\n  return context;\n}\n_s2(useExpense, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ExpenseProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsxDEV","_jsxDEV","ExpenseContext","initialState","expenses","groups","id","name","members","color","currentUser","balances","expenseReducer","state","action","type","newExpense","Date","now","payload","createdAt","toISOString","updatedBalances","amount","paidBy","splitBetween","splitAmount","length","forEach","person","from","to","settleAmount","settledBalances","ExpenseProvider","children","_s","dispatch","addExpense","expense","settleUp","addGroup","group","getNetBalance","totalOwed","totalOwing","Object","entries","otherPerson","Math","abs","net","getSimplifiedBalances","simplified","processed","Set","key","sort","join","has","push","add","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useExpense","_s2","context","Error","$RefreshReg$"],"sources":["/Users/rohanksojo/Documents/Folders/Settler/src/context/ExpenseContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\n\nconst ExpenseContext = createContext();\n\nconst initialState = {\n  expenses: [],\n  groups: [\n    {\n      id: 1,\n      name: 'Roommates',\n      members: ['You', 'Alice', 'Bob', 'Charlie'],\n      color: '#3b82f6'\n    },\n    {\n      id: 2,\n      name: 'Trip to NYC',\n      members: ['You', 'Alice', 'Bob'],\n      color: '#22c55e'\n    }\n  ],\n  currentUser: 'You',\n  balances: {}\n};\n\nfunction expenseReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_EXPENSE':\n      const newExpense = {\n        id: Date.now(),\n        ...action.payload,\n        createdAt: new Date().toISOString()\n      };\n      \n      // Calculate new balances\n      const updatedBalances = { ...state.balances };\n      const { amount, paidBy, splitBetween } = action.payload;\n      const splitAmount = amount / splitBetween.length;\n      \n      // Update balances for each person\n      splitBetween.forEach(person => {\n        if (!updatedBalances[person]) {\n          updatedBalances[person] = {};\n        }\n        if (!updatedBalances[person][paidBy]) {\n          updatedBalances[person][paidBy] = 0;\n        }\n        if (!updatedBalances[paidBy]) {\n          updatedBalances[paidBy] = {};\n        }\n        if (!updatedBalances[paidBy][person]) {\n          updatedBalances[paidBy][person] = 0;\n        }\n        \n        if (person !== paidBy) {\n          updatedBalances[person][paidBy] += splitAmount;\n          updatedBalances[paidBy][person] -= splitAmount;\n        }\n      });\n      \n      return {\n        ...state,\n        expenses: [...state.expenses, newExpense],\n        balances: updatedBalances\n      };\n      \n    case 'SETTLE_UP':\n      const { from, to, amount: settleAmount } = action.payload;\n      const settledBalances = { ...state.balances };\n      \n      if (settledBalances[from] && settledBalances[from][to]) {\n        settledBalances[from][to] -= amount;\n        if (settledBalances[from][to] <= 0) {\n          delete settledBalances[from][to];\n        }\n      }\n      \n      if (settledBalances[to] && settledBalances[to][from]) {\n        settledBalances[to][from] += amount;\n        if (settledBalances[to][from] <= 0) {\n          delete settledBalances[to][from];\n        }\n      }\n      \n      return {\n        ...state,\n        balances: settledBalances\n      };\n      \n    case 'ADD_GROUP':\n      return {\n        ...state,\n        groups: [...state.groups, action.payload]\n      };\n      \n    default:\n      return state;\n  }\n}\n\nexport function ExpenseProvider({ children }) {\n  const [state, dispatch] = useReducer(expenseReducer, initialState);\n  \n  const addExpense = (expense) => {\n    dispatch({ type: 'ADD_EXPENSE', payload: expense });\n  };\n  \n  const settleUp = (from, to, amount) => {\n    dispatch({ type: 'SETTLE_UP', payload: { from, to, amount } });\n  };\n  \n  const addGroup = (group) => {\n    dispatch({ type: 'ADD_GROUP', payload: group });\n  };\n  \n  const getNetBalance = (person) => {\n    const balances = state.balances[person] || {};\n    let totalOwed = 0;\n    let totalOwing = 0;\n    \n    Object.entries(balances).forEach(([otherPerson, amount]) => {\n      if (amount > 0) {\n        totalOwed += amount;\n      } else {\n        totalOwing += Math.abs(amount);\n      }\n    });\n    \n    return { totalOwed, totalOwing, net: totalOwed - totalOwing };\n  };\n  \n  const getSimplifiedBalances = () => {\n    const simplified = [];\n    const processed = new Set();\n    \n    Object.entries(state.balances).forEach(([person, balances]) => {\n      Object.entries(balances).forEach(([otherPerson, amount]) => {\n        const key = [person, otherPerson].sort().join('-');\n        if (!processed.has(key) && amount !== 0) {\n          simplified.push({\n            from: amount > 0 ? otherPerson : person,\n            to: amount > 0 ? person : otherPerson,\n            amount: Math.abs(amount)\n          });\n          processed.add(key);\n        }\n      });\n    });\n    \n    return simplified;\n  };\n  \n  return (\n    <ExpenseContext.Provider value={{\n      ...state,\n      addExpense,\n      settleUp,\n      addGroup,\n      getNetBalance,\n      getSimplifiedBalances\n    }}>\n      {children}\n    </ExpenseContext.Provider>\n  );\n}\n\nexport function useExpense() {\n  const context = useContext(ExpenseContext);\n  if (!context) {\n    throw new Error('useExpense must be used within an ExpenseProvider');\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}